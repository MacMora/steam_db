import pandas as pd
import sys
import os
from sqlalchemy import create_engine, text
from datetime import datetime

# Agregar el directorio ra√≠z al path para importaciones
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config.configuraciones import configuracion

# Importaciones opcionales para visualizaci√≥n
try:
    import matplotlib.pyplot as plt
    import seaborn as sns
    VISUALIZATION_AVAILABLE = True
except ImportError:
    VISUALIZATION_AVAILABLE = False
    print("‚ö†Ô∏è  Matplotlib/Seaborn no disponibles. Funcionalidad b√°sica disponible.")

class SteamDBView:
    def __init__(self):
        self.config = configuracion()
        self.engine = None
        self.connect_to_database()

    def connect_to_database(self):
        """Conectar a la base de datos"""
        try:
            if not all([self.config.DB_HOST, self.config.DB_PORT, self.config.DB_NAME, 
                       self.config.DB_USER, self.config.DB_PASSWORD]):
                print("‚ùå Error: Faltan credenciales de base de datos en el archivo .env")
                print("Aseg√∫rate de tener configurado:")
                print("- DB_HOST")
                print("- DB_PORT") 
                print("- DB_NAME")
                print("- DB_USER")
                print("- DB_PASSWORD")
                return False
            
            self.engine = create_engine(self.config.DATABASE_URL)
            
            # Probar la conexi√≥n
            with self.engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            
            print("‚úÖ Conexi√≥n a la base de datos establecida")
            return True
            
        except Exception as e:
            print(f"‚ùå Error al conectar a la base de datos: {e}")
            return False

    def get_all_data(self, limit=None):
        """Obtener todos los datos de la tabla"""
        try:
            if not self.engine:
                print("‚ùå No hay conexi√≥n a la base de datos")
                return None
            
            query = "SELECT * FROM video_games_sales"
            if limit:
                query += f" LIMIT {limit}"
            
            df = pd.read_sql(query, self.engine)
            print(f"‚úÖ Datos obtenidos: {len(df)} registros")
            return df
            
        except Exception as e:
            print(f"‚ùå Error al obtener datos: {e}")
            return None

    def get_basic_stats(self):
        """Obtener estad√≠sticas b√°sicas de la base de datos"""
        try:
            if not self.engine:
                print("‚ùå No hay conexi√≥n a la base de datos")
                return
            
            with self.engine.connect() as conn:
                # Total de registros
                total_result = conn.execute(text("SELECT COUNT(*) FROM video_games_sales"))
                total_records = total_result.scalar()
                
                # Estad√≠sticas por plataforma
                platform_stats = conn.execute(text("""
                    SELECT platform, COUNT(*) as count 
                    FROM video_games_sales 
                    GROUP BY platform 
                    ORDER BY count DESC 
                    LIMIT 10
                """)).fetchall()
                
                # Estad√≠sticas por g√©nero
                genre_stats = conn.execute(text("""
                    SELECT genre, COUNT(*) as count 
                    FROM video_games_sales 
                    GROUP BY genre 
                    ORDER BY count DESC 
                    LIMIT 10
                """)).fetchall()
                
                # Top juegos por ventas globales
                top_games = conn.execute(text("""
                    SELECT name, platform, global_sales, year
                    FROM video_games_sales 
                    ORDER BY global_sales DESC 
                    LIMIT 10
                """)).fetchall()
                
                print("=" * 60)
                print("üìä ESTAD√çSTICAS DE LA BASE DE DATOS")
                print("=" * 60)
                print(f"üìà Total de registros: {total_records:,}")
                
                print(f"\nüéÆ TOP 10 PLATAFORMAS:")
                for i, (platform, count) in enumerate(platform_stats, 1):
                    print(f"  {i:2d}. {platform:<15} {count:>6,} juegos")
                
                print(f"\nüéØ TOP 10 G√âNEROS:")
                for i, (genre, count) in enumerate(genre_stats, 1):
                    print(f"  {i:2d}. {genre:<15} {count:>6,} juegos")
                
                print(f"\nüèÜ TOP 10 JUEGOS POR VENTAS GLOBALES:")
                for i, (name, platform, sales, year) in enumerate(top_games, 1):
                    print(f"  {i:2d}. {name:<30} ({platform}) - {sales:>6.2f}M - {year}")
                
        except Exception as e:
            print(f"‚ùå Error al obtener estad√≠sticas: {e}")

    def get_platform_analysis(self):
        """An√°lisis detallado por plataforma"""
        try:
            if not self.engine:
                return None
            
            query = """
            SELECT 
                platform,
                COUNT(*) as total_games,
                AVG(global_sales) as avg_sales,
                MAX(global_sales) as max_sales,
                SUM(global_sales) as total_sales,
                AVG(year) as avg_year
            FROM video_games_sales 
            WHERE platform IS NOT NULL
            GROUP BY platform 
            ORDER BY total_sales DESC
            """
            
            df = pd.read_sql(query, self.engine)
            
            print("\n" + "=" * 80)
            print("üéÆ AN√ÅLISIS POR PLATAFORMA")
            print("=" * 80)
            print(f"{'Plataforma':<15} {'Juegos':<8} {'Ventas Avg':<12} {'Ventas Max':<12} {'Ventas Total':<15} {'A√±o Avg':<8}")
            print("-" * 80)
            
            for _, row in df.iterrows():
                print(f"{row['platform']:<15} {row['total_games']:<8,} {row['avg_sales']:<12.2f} {row['max_sales']:<12.2f} {row['total_sales']:<15.2f} {row['avg_year']:<8.0f}")
            
            return df
            
        except Exception as e:
            print(f"‚ùå Error en an√°lisis de plataformas: {e}")
            return None

    def get_genre_analysis(self):
        """An√°lisis detallado por g√©nero"""
        try:
            if not self.engine:
                return None
            
            query = """
            SELECT 
                genre,
                COUNT(*) as total_games,
                AVG(global_sales) as avg_sales,
                MAX(global_sales) as max_sales,
                SUM(global_sales) as total_sales
            FROM video_games_sales 
            WHERE genre IS NOT NULL
            GROUP BY genre 
            ORDER BY total_sales DESC
            """
            
            df = pd.read_sql(query, self.engine)
            
            print("\n" + "=" * 70)
            print("üéØ AN√ÅLISIS POR G√âNERO")
            print("=" * 70)
            print(f"{'G√©nero':<15} {'Juegos':<8} {'Ventas Avg':<12} {'Ventas Max':<12} {'Ventas Total':<15}")
            print("-" * 70)
            
            for _, row in df.iterrows():
                print(f"{row['genre']:<15} {row['total_games']:<8,} {row['avg_sales']:<12.2f} {row['max_sales']:<12.2f} {row['total_sales']:<15.2f}")
            
            return df
            
        except Exception as e:
            print(f"‚ùå Error en an√°lisis de g√©neros: {e}")
            return None

    def get_yearly_analysis(self):
        """An√°lisis por a√±o"""
        try:
            if not self.engine:
                return None
            
            query = """
            SELECT 
                year,
                COUNT(*) as total_games,
                AVG(global_sales) as avg_sales,
                SUM(global_sales) as total_sales
            FROM video_games_sales 
            WHERE year > 0
            GROUP BY year 
            ORDER BY year DESC
            LIMIT 20
            """
            
            df = pd.read_sql(query, self.engine)
            
            print("\n" + "=" * 60)
            print("üìÖ AN√ÅLISIS POR A√ëO (√öLTIMOS 20 A√ëOS)")
            print("=" * 60)
            print(f"{'A√±o':<6} {'Juegos':<8} {'Ventas Avg':<12} {'Ventas Total':<15}")
            print("-" * 60)
            
            for _, row in df.iterrows():
                print(f"{row['year']:<6} {row['total_games']:<8,} {row['avg_sales']:<12.2f} {row['total_sales']:<15.2f}")
            
            return df
            
        except Exception as e:
            print(f"‚ùå Error en an√°lisis por a√±o: {e}")
            return None

    def search_games(self, search_term, limit=10):
        """Buscar juegos por nombre"""
        try:
            if not self.engine:
                return None
            
            query = """
            SELECT name, platform, year, genre, publisher, global_sales
            FROM video_games_sales 
            WHERE LOWER(name) LIKE LOWER(:search_term)
            ORDER BY global_sales DESC
            LIMIT :limit
            """
            
            df = pd.read_sql(query, self.engine, params={
                'search_term': f'%{search_term}%',
                'limit': limit
            })
            
            if len(df) > 0:
                print(f"\nüîç RESULTADOS DE B√öSQUEDA PARA: '{search_term}'")
                print("=" * 80)
                print(f"{'Nombre':<30} {'Plataforma':<12} {'A√±o':<6} {'G√©nero':<12} {'Ventas':<8}")
                print("-" * 80)
                
                for _, row in df.iterrows():
                    print(f"{row['name']:<30} {row['platform']:<12} {row['year']:<6} {row['genre']:<12} {row['global_sales']:<8.2f}")
            else:
                print(f"‚ùå No se encontraron juegos con el t√©rmino: '{search_term}'")
            
            return df
            
        except Exception as e:
            print(f"‚ùå Error en b√∫squeda: {e}")
            return None

    def get_top_publishers(self, limit=15):
        """Obtener top publishers por ventas"""
        try:
            if not self.engine:
                return None
            
            query = """
            SELECT 
                publisher,
                COUNT(*) as total_games,
                SUM(global_sales) as total_sales,
                AVG(global_sales) as avg_sales
            FROM video_games_sales 
            WHERE publisher IS NOT NULL AND publisher != 'Unknown'
            GROUP BY publisher 
            ORDER BY total_sales DESC
            LIMIT :limit
            """
            
            df = pd.read_sql(query, self.engine, params={'limit': limit})
            
            print(f"\nüè¢ TOP {limit} PUBLISHERS POR VENTAS")
            print("=" * 70)
            print(f"{'Publisher':<25} {'Juegos':<8} {'Ventas Total':<15} {'Ventas Avg':<12}")
            print("-" * 70)
            
            for _, row in df.iterrows():
                print(f"{row['publisher']:<25} {row['total_games']:<8,} {row['total_sales']:<15.2f} {row['avg_sales']:<12.2f}")
            
            return df
            
        except Exception as e:
            print(f"‚ùå Error al obtener publishers: {e}")
            return None

    def get_database_info(self):
        """Obtener informaci√≥n general de la base de datos"""
        try:
            if not self.engine:
                return
            
            with self.engine.connect() as conn:
                # Informaci√≥n de la tabla
                table_info = conn.execute(text("""
                    SELECT 
                        COUNT(*) as total_records,
                        MIN(year) as min_year,
                        MAX(year) as max_year,
                        MIN(global_sales) as min_sales,
                        MAX(global_sales) as max_sales,
                        AVG(global_sales) as avg_sales
                    FROM video_games_sales
                """)).fetchone()
                
                print("\n" + "=" * 50)
                print("üìä INFORMACI√ìN GENERAL DE LA BASE DE DATOS")
                print("=" * 50)
                print(f"üìà Total de registros: {table_info[0]:,}")
                print(f"üìÖ Rango de a√±os: {table_info[1]} - {table_info[2]}")
                print(f"üí∞ Ventas m√≠nimas: {table_info[3]:.2f}M")
                print(f"üí∞ Ventas m√°ximas: {table_info[4]:.2f}M")
                print(f"üí∞ Ventas promedio: {table_info[5]:.2f}M")
                
        except Exception as e:
            print(f"‚ùå Error al obtener informaci√≥n: {e}")

    def export_to_csv(self, filename=None):
        """Exportar datos a CSV"""
        try:
            if not self.engine:
                return False
            
            if not filename:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"video_games_export_{timestamp}.csv"
            
            df = self.get_all_data()
            if df is not None:
                df.to_csv(filename, index=False)
                print(f"‚úÖ Datos exportados exitosamente a: {filename}")
                return True
            return False
            
        except Exception as e:
            print(f"‚ùå Error al exportar: {e}")
            return False

    def interactive_menu(self):
        """Men√∫ interactivo para explorar los datos"""
        while True:
            print("\n" + "=" * 60)
            print("üéÆ MEN√ö INTERACTIVO - VIDEO GAMES SALES DATABASE")
            print("=" * 60)
            print("1. Ver estad√≠sticas b√°sicas")
            print("2. An√°lisis por plataforma")
            print("3. An√°lisis por g√©nero")
            print("4. An√°lisis por a√±o")
            print("5. Buscar juegos")
            print("6. Top publishers")
            print("7. Ver todos los datos (limitado)")
            print("8. Informaci√≥n de la base de datos")
            print("9. Exportar a CSV")
            print("0. Salir")
            print("-" * 60)
            
            choice = input("Selecciona una opci√≥n (0-9): ").strip()
            
            if choice == "0":
                print("üëã ¬°Hasta luego!")
                break
            elif choice == "1":
                self.get_basic_stats()
            elif choice == "2":
                self.get_platform_analysis()
            elif choice == "3":
                self.get_genre_analysis()
            elif choice == "4":
                self.get_yearly_analysis()
            elif choice == "5":
                search_term = input("Ingresa el t√©rmino de b√∫squeda: ").strip()
                if search_term:
                    self.search_games(search_term)
            elif choice == "6":
                self.get_top_publishers()
            elif choice == "7":
                limit = input("¬øCu√°ntos registros quieres ver? (Enter para 20): ").strip()
                limit = int(limit) if limit.isdigit() else 20
                df = self.get_all_data(limit)
                if df is not None:
                    print(f"\nüìã PRIMEROS {len(df)} REGISTROS:")
                    print(df.to_string(index=False))
            elif choice == "8":
                self.get_database_info()
            elif choice == "9":
                filename = input("Nombre del archivo (Enter para auto): ").strip()
                filename = filename if filename else None
                self.export_to_csv(filename)
            else:
                print("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")
            
            input("\nPresiona Enter para continuar...")

def main():
    """Funci√≥n principal para ejecutar la vista"""
    print("üéÆ INICIANDO VISTA DE BASE DE DATOS VIDEO GAMES SALES")
    print("=" * 60)
    
    # Crear instancia de la vista
    view = SteamDBView()
    
    # Verificar conexi√≥n
    if not view.engine:
        print("‚ùå No se pudo conectar a la base de datos.")
        print("Aseg√∫rate de que:")
        print("1. PostgreSQL est√© ejecut√°ndose")
        print("2. La base de datos 'steam_db' exista")
        print("3. Las credenciales en .env sean correctas")
        return
    
    # Mostrar informaci√≥n b√°sica
    view.get_database_info()
    view.get_basic_stats()
    
    # Iniciar men√∫ interactivo
    view.interactive_menu()

if __name__ == "__main__":
    main()
